{"version":3,"sources":["serviceWorker.js","ui/VendorPage.js","VendorPlugin.js","assets/utils/decimals.js","assets/Nft.js","index.js"],"names":["Boolean","window","location","hostname","match","DuesNotPaid","style","color","DuesPaid","VendorPage","props","state","duesStatus","this","assets","plugin","accounts","defaultAccount","contract","getContract","console","log","methods","payDues","send","from","value","returnValue","setState","burnerComponents","Page","Button","title","type","key","onClick","testFunction","disabled","Component","VendorPlugin","assetId","contractAddress","network","pluginContext","_pluginContext","addHomeButton","addPage","web3","getWeb3","eth","Contract","dfsABI","require","toBN","POLL_INTERVAL","nft","address","abi","nftAbi","pollInterval","id","name","decimals","_pollInterval","_contract","cleanupFunctions","core","txHash","Error","account","getBalance","balance","getDisplayValue","options","forEach","fn","balanceOf","call","toString","to","allowance","approve","_getEventsFromTx","events","filter","event","transferEvent","assetName","returnValues","displayValue","message","running","block","poll","a","getBlockNumber","currentBlock","getPastEvents","fromBlock","toBlock","addHistoryEvent","asset","tx","transactionHash","warn","setTimeout","unsubscribe","push","getTransactionReceipt","receipt","blockNumber","transfer","hash","BurnerCore","signers","InjectedSigner","LocalSigner","gateways","InjectedGateway","InfuraGateway","process","XDaiGateway","xdai","dai","exchange","Exchange","pairs","xdaiBridge","uniswapDai","ReactDOM","render","plugins","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e84b247a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\n\nconst DuesNotPaid = () => (\n  <div style={{ color: 'red' }}>Team is not selected</div>\n);\n\nconst DuesPaid = () => (\n  <div style={{ color: 'green' }}>Team submitted</div>\n);\n\n\nexport default class VendorPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      duesStatus: 0\n    }\n  }\n\n  async testFunction() {\n    const { assets, plugin, accounts, defaultAccount} = this.props;\n    const contract = plugin.getContract();\n    console.log(\"plugin\", plugin);\n    console.log(\"assets\", assets);\n    console.log(\"accounts\", accounts);\n    console.log(\"contract\", contract);\n    console.log(\"props\", this.props);\n    console.log(\"sender:\", accounts[0])\n\n    // let contract = this.getContract();\n    let returnValue = await contract.methods.payDues().send({\n      from: accounts[0],\n      value: 1\n    });\n    console.log(returnValue);\n    this.setState({\n      duesStatus: 1\n    })\n  }\n\n\n  render() {\n    const { burnerComponents, plugin } = this.props;\n    const { Page, Button } = burnerComponents;\n\n    return (\n      <Page title=\"Pick Your Team\">\n          <input type=\"checkbox\" value=\"1\" />Patrick Mahomes - $5000<br />\n          <input type=\"checkbox\" value=\"2\" />Julio Jones - $3000<br />\n          <input type=\"checkbox\" value=\"3\" />Dalvin Cook - $2500<br />\n          <input type=\"checkbox\" value=\"4\" />Travis Kelce - $3500<br />\n          <input type=\"checkbox\" value=\"5\" />Gardner Minshew - $3000<br />\n          <input type=\"checkbox\" value=\"6\" />Sammy Watkins - $2000<br />\n          <input type=\"checkbox\" value=\"7\" />Christian McCaffrey - $2500<br />\n          <input type=\"checkbox\" value=\"8\" />Emmanuel Sanders - $2000<br />\n          <input type=\"checkbox\" value=\"9\" />Saquon Barkley - $3000<br />\n          <input type=\"checkbox\" value=\"10\" />Antonio Brown - $0\n\n          <Button\n            key={10}\n            onClick={ () => this.testFunction()}\n            disabled={this.state.duesStatus}\n          >\n            Submit Team\n          </Button>\n          <br /><br />\n          {this.state.duesStatus ? <DuesPaid /> : <DuesNotPaid />}\n          \n      </Page>\n    );\n  }\n}\n","import VendorPage from './ui/VendorPage';\nimport dfsABI from './abi/DFS.json';\n\nexport default class VendorPlugin {\n  constructor({assetId, contractAddress, network}) {\n    this.assetId = assetId;\n    this.contractAddress = contractAddress;\n    this.network = network;\n\n    this.contract = null;\n  }\n\n  initializePlugin(pluginContext) {\n    this._pluginContext = pluginContext;\n\n    pluginContext.addHomeButton('Sports', '/sports');\n    pluginContext.addPage('/sports', VendorPage);\n  }\n\n  getContract() {\n    if (!this.contract) {\n      const web3 = this._pluginContext.getWeb3(this.network);\n      this.contract = new web3.eth.Contract(dfsABI, this.contractAddress);\n    }\n    return this.contract;\n  }\n\n  getWeb3() {\n    return this._pluginContext.getWeb3(this.network);\n  }\n}\n","const { toBN } = require('web3-utils');\n\nexport default function toDecimal(weiInput, decimals) {\n  const wei = toBN(weiInput.toString());\n  const base = toBN('10').pow(toBN(decimals.toString()));\n  const baseLength = base.toString().length - 1 || 1;\n\n  let fraction = wei.mod(base).toString(10);\n\n  while (fraction.length < baseLength) {\n    fraction = `0${fraction}`;\n  }\n  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1]\n\n  const whole = wei.div(base).toString(10);\n  const value = `${whole}${fraction === '0' ? '' : `.${fraction}`}`;\n  return value;\n}\n","import toDecimal from './utils/decimals';\nimport nftAbi from './Nft.json';\n\nconst BLOCK_LOOKBACK = 250;\nconst POLL_INTERVAL = 2500;\n\nexport default class Nft {\n  constructor({ address, abi=nftAbi, pollInterval=POLL_INTERVAL, id, name, network, type='nft', decimals=0 }) {\n    this.address = address;\n    this.abi = abi;\n    this._pollInterval = pollInterval;\n    this._contract = null;\n    this.id = id;\n    this.name = name;\n    this.network = network;\n    this.type = type;\n\n    this.decimals = decimals;\n\n    this.cleanupFunctions = [];\n  }\n\n  setCore(core) {\n    this.core = core;\n  }\n\n  supportsMessages() {\n    return false;\n  }\n\n  async getTx(txHash) {\n    throw new Error('Not implemented');\n  }\n\n  async getBalance(account) {\n    throw new Error('getBalance not implemented');\n  }\n\n  async getDisplayBalance(account, decimals=0) {\n    const balance = await this.getBalance(account);\n    return this.getDisplayValue(balance, decimals);\n  }\n\n  startWatchingAddress(address) {\n    throw new Error('watching not implemented');\n  }\n\n  getWeb3(options) {\n    return this.core.getWeb3(this.network, options);\n  }\n\n  stop() {\n    this.cleanupFunctions.forEach(fn => fn());\n  }\n\n  async getBalance(account) {\n    const balance = await this.getContract().methods.balanceOf(account).call();\n    return balance.toString();\n  }\n\n  getContract() {\n    if (!this._contract) {\n      const Contract = this.getWeb3().eth.Contract;\n      this._contract = new Contract(this.abi, this.address);\n    }\n    return this._contract;\n  }\n\n  allowance(from, to) {\n    return this.getContract().methods.allowance(from, to).call();\n  }\n\n  approve(from, to, value) {\n    return this.getContract().methods.approve(to, value).send({ from });\n  }\n\n  async getTx(txHash) {\n    const events = await this._getEventsFromTx(txHash);\n    const [transferEvent] = events.filter(event => event.event === 'Transfer');\n    if (!transferEvent) {\n      return null;\n    }\n\n    return {\n      assetName: this.name,\n      from: transferEvent.returnValues.from,\n      to: transferEvent.returnValues.to,\n      value: transferEvent.returnValues.value.toString(),\n      displayValue: this.getDisplayValue(transferEvent.returnValues.value.toString()),\n      message: null,\n    };\n  }\n\n  startWatchingAddress(address) {\n    let running = true;\n\n    let block = 0;\n    const poll = async () => {\n      if (!running) {\n        return;\n      }\n      try {\n        const currentBlock = await this.getWeb3().eth.getBlockNumber();\n        if (block === 0) {\n          block = currentBlock - BLOCK_LOOKBACK;\n        }\n\n        const events = await this.getContract().getPastEvents('Transfer', {\n          filter: { to: address },\n          fromBlock: block,\n          toBlock: currentBlock,\n        });\n        events.forEach(event => this.core.addHistoryEvent({\n          asset: this.id,\n          type: 'send',\n          value: event.returnValues.value.toString(),\n          from: event.returnValues.from,\n          to: event.returnValues.to,\n          tx: event.transactionHash,\n          // TODO: timestamp,\n        }));\n\n        block = currentBlock;\n      } catch (e) {\n        console.warn('Polling Address failed', e);\n      }\n      setTimeout(poll, this._pollInterval);\n    };\n\n    poll();\n\n    const unsubscribe = () => {\n      running = false;\n    };\n    this.cleanupFunctions.push(unsubscribe);\n    return unsubscribe;\n  }\n\n\n  async _getEventsFromTx(txHash) {\n    const web3 = this.getWeb3();\n    const receipt = await web3.eth.getTransactionReceipt(txHash);\n    if (!receipt) {\n      return [];\n    }\n    const events = await this.getContract().getPastEvents('allEvents', {\n      fromBlock: receipt.blockNumber,\n      toBlock: receipt.blockNumber,\n    });\n    return events.filter(event => event.transactionHash === txHash);\n  }\n\n  async _send({ from, to, value }) {\n    const receipt = await this.getContract().methods.transfer(to, value).send({ from });\n    return {\n      ...receipt,\n      txHash: receipt.hash,\n    };\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { xdai, dai, eth } from '@burner-wallet/assets';\nimport BurnerCore from '@burner-wallet/core';\nimport { InjectedSigner, LocalSigner } from '@burner-wallet/core/signers';\nimport { InfuraGateway, InjectedGateway, XDaiGateway } from '@burner-wallet/core/gateways';\nimport Exchange from '@burner-wallet/exchange';\nimport { xdaiBridge, uniswapDai } from '@burner-wallet/exchange/pairs';\nimport BurnerUI from '@burner-wallet/ui';\n// import LegacyPlugin from '@burner-wallet/plugins/legacy';\n\n// this imports from the plugin\n\n// import FootballPlugin from './football-plugin'\nimport VendorPlugin from './VendorPlugin';\nimport Nft from './assets/Nft.js'\n\nconst nft = new Nft({\n  id: \"nft\",\n  name: \"Trophies\",\n  network: \"100\",\n  address: \"0xA20258B0c9F0F43Ee08785EA89FbE5b9d636d475\"\n});\n\n\nconst core = new BurnerCore({\n  signers: [new InjectedSigner(), new LocalSigner()],\n  gateways: [\n    new InjectedGateway(),\n    new InfuraGateway(process.env.REACT_APP_INFURA_KEY),\n    new XDaiGateway(),\n    ],\n    assets: [xdai, dai, eth, nft],\n});\n\nconst exchange = new Exchange({\npairs: [xdaiBridge, uniswapDai],\n});\n\nconst BurnerWallet = () =>\n<BurnerUI\ntitle=\"WyoHackathon\"\ncore={core}\nplugins={[exchange, new VendorPlugin({  assetId: 'xdai',\n  contractAddress: '0x797A9A300249AB72E52090B511C26adcA0bA108a',\n  network: '100'})]}\n/>\n\nReactDOM.render(<BurnerWallet />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}